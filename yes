==24757== Memcheck, a memory error detector
==24757== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==24757== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==24757== Command: ./a.out
==24757== Parent PID: 22732
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109DEE: insert_table (table.c:23)
==24757==    by 0x109E3E: init_table (table.c:30)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b594d8 is 0 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x109DD6: insert_table (table.c:21)
==24757==    by 0x109E3E: init_table (table.c:30)
==24757==    by 0x10991D: main (main.c:15)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109E07: insert_table (table.c:24)
==24757==    by 0x109E3E: init_table (table.c:30)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59050 is 8 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x10990C: main (main.c:14)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109DEE: insert_table (table.c:23)
==24757==    by 0x109E5C: init_table (table.c:31)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59528 is 0 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x109DD6: insert_table (table.c:21)
==24757==    by 0x109E5C: init_table (table.c:31)
==24757==    by 0x10991D: main (main.c:15)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109E07: insert_table (table.c:24)
==24757==    by 0x109E5C: init_table (table.c:31)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59058 is 16 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x10990C: main (main.c:14)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109DEE: insert_table (table.c:23)
==24757==    by 0x109E7A: init_table (table.c:32)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59578 is 0 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x109DD6: insert_table (table.c:21)
==24757==    by 0x109E7A: init_table (table.c:32)
==24757==    by 0x10991D: main (main.c:15)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109E07: insert_table (table.c:24)
==24757==    by 0x109E7A: init_table (table.c:32)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59060 is 16 bytes after a block of size 16 in arena "client"
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109DEE: insert_table (table.c:23)
==24757==    by 0x109E98: init_table (table.c:33)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b595c8 is 0 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x109DD6: insert_table (table.c:21)
==24757==    by 0x109E98: init_table (table.c:33)
==24757==    by 0x10991D: main (main.c:15)
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109E07: insert_table (table.c:24)
==24757==    by 0x109E98: init_table (table.c:33)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59068 is 24 bytes after a block of size 16 in arena "client"
==24757== 
==24757== Invalid write of size 8
==24757==    at 0x109DEE: insert_table (table.c:23)
==24757==    by 0x109EB6: init_table (table.c:34)
==24757==    by 0x10991D: main (main.c:15)
==24757==  Address 0x4b59618 is 0 bytes after a block of size 8 alloc'd
==24757==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==24757==    by 0x109F2D: ft_calloc (in /home/diego/42Projects/minishell/a.out)
==24757==    by 0x109DD6: insert_table (table.c:21)
==24757==    by 0x109EB6: init_table (table.c:34)
==24757==    by 0x10991D: main (main.c:15)
==24757== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 79009216.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==24757==    at 0x580427EA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x58042917: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x58042ABB: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x5804C80F: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x5803AE3A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x58039557: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x5803DEDD: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x58038808: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x1008CD65E7: ???
==24757==    by 0x1008BA9F2F: ???
==24757==    by 0x581FCD83: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==24757==    by 0x1008BA9F17: ???
==24757==    by 0x1008BA9F2F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 24757)
==24757==    at 0x109E07: insert_table (table.c:24)
==24757==    by 0x109EB6: init_table (table.c:34)
==24757==    by 0x10991D: main (main.c:15)
client stack range: [0x1FFEFFD000 0x1FFF000FFF] client SP: 0x1FFEFFF970
valgrind stack range: [0x1008AAA000 0x1008BA9FFF] top usage: 8656 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

